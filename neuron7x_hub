import numpy as np
from typing import Dict, List, Deque, Tuple
from collections import deque
import logging
from math import sin, cos, pi, sqrt, exp
import json
from dataclasses import dataclass, field
from sklearn.metrics.pairwise import cosine_similarity
import hashlib

# === CONFIGURATION ===
@dataclass
class NeuroConfig:
    DIM: int = 512
    MEMORY_DECAY: float = 0.97
    SHU_ALPHA: float = 0.618
    DECISION_THRESHOLD: float = 0.35
    NEUROTRANSMITTER_BASELINE: Dict[str, float] = field(
        default_factory=lambda: {
            "serotonin": 1.0,
            "dopamine": 1.0,
            "GABA": 1.0,
            "glutamate": 1.0
        }
    )

# === QUANTUM VECTOR ENCODING ===
class QuantumEncoder:
    def __init__(self, embeddings: Dict[str, np.ndarray], config: NeuroConfig):
        self.base_emb = embeddings
        self.oov_cache = {}
        self.config = config

    def _quantum_hash(self, token: str) -> np.ndarray:
        seed = int(hashlib.sha256(token.encode()).hexdigest()[:8], 16)
        rng = np.random.RandomState(seed)
        return rng.normal(0, 1/sqrt(self.config.DIM), self.config.DIM)

    def encode(self, concept: str) -> np.ndarray:
        vec = self.base_emb.get(concept, self._quantum_hash(concept))
        return vec / (np.linalg.norm(vec) + 1e-8)

# === HARMONIC OPTIMIZATION ===
class ShuHarmonicEngine:
    def __init__(self, config: NeuroConfig):
        self.weights = np.array([
            [sin(pi/3*i)*cos(pi/3*j) for j in range(3)]
            for i in range(3)
        ])
        self.alpha = config.SHU_ALPHA

    def evaluate(self, matrix: np.ndarray) -> float:
        return np.tanh(np.sum(self.weights * matrix) * self.alpha)

# === NEUROPHYSIOLOGY ===
class NeurochemicalState:
    def __init__(self, config: NeuroConfig):
        self.nt = config.NEUROTRANSMITTER_BASELINE.copy()
        self.hormones = {"BDNF": 1.0, "cortisol": 1.0}
        self.receptors = {"5HT2A": 0.5, "NMDA": 0.7}

    def modulate(self, nt: str, factor: float):
        self.nt[nt] = np.clip(self.nt[nt] * factor, 0, 5.0)

    def update_receptors(self, receptor: str, delta: float):
        self.receptors[receptor] = np.clip(
            self.receptors[receptor] + delta, 0, 1.5)

# === MEMORY AND PERSONALITY ===
class BioMemory:
    def __init__(self, harmonic: ShuHarmonicEngine, config: NeuroConfig):
        self.assoc = {}
        self.performance = {}
        self.harmonic = harmonic
        self.decay = config.MEMORY_DECAY

    def store(self, key: str, vec: np.ndarray, reward: float):
        if key not in self.assoc:
            self.assoc[key] = deque(maxlen=10)
        self.assoc[key].append(vec)
        self.performance[key] = np.clip(
            self.performance.get(key, 0.0) * self.decay + reward, -1, 1)

    def recall(self, key: str) -> Tuple[float, float]:
        vectors = list(self.assoc.get(key, []))
        if len(vectors) < 3:
            return 0.0, self.performance.get(key, 0.0)
        matrix = np.array([v[:3] for v in vectors[:3]])
        return self.harmonic.evaluate(matrix), self.performance[key]

class PersonalityProfile:
    def __init__(self, name: str, traits: Dict[str, float]):
        self.name = name
        self.traits = {k: np.clip(v, -1, 1) for k,v in traits.items()}

    def match(self, context: Dict[str, float]) -> float:
        return sum(
            self.traits.get(t, 0) * context.get(t, 0)
            for t in context
        )

# === MAIN ENGINE ===
class BioQuantumEngine:
    def __init__(self, config: NeuroConfig):
        self.config = config
        self.harmonic = ShuHarmonicEngine(config)
        self.memory = BioMemory(self.harmonic, config)
        self.chemistry = NeurochemicalState(config)
        self.personalities = []

    def add_personality(self, profile: PersonalityProfile):
        self.personalities.append(profile)

    def decide(self, context: Dict[str, float], concept: str) -> Tuple[str, dict]:
        state_scores = {p.name: p.match(context) for p in self.personalities}
        active_state = max(state_scores, key=state_scores.get)

        harmonic, perf = self.memory.recall(concept)
        chem_factor = 1 + 0.5*self.chemistry.receptors["5HT2A"]

        score = (0.4*harmonic + 0.3*perf + 0.3*state_scores[active_state]) * chem_factor
        action = concept if score > self.config.DECISION_THRESHOLD else "hold"

        return action, {
            "action": action,
            "score": score,
            "personality": active_state,
            "harmonic": harmonic,
            "performance": perf,
            "chemistry": {
                "serotonin": self.chemistry.nt["serotonin"],
                "5HT2A": self.chemistry.receptors["5HT2A"]
            }
        }

# === PSYCHEDELIC SIMULATION ===
def simulate_psychedelic(engine: BioQuantumEngine, dose_mg: float):
    engine.chemistry.modulate("serotonin", 1 + dose_mg/20)
    engine.chemistry.update_receptors("5HT2A", dose_mg/50)

    for key in engine.memory.assoc:
        engine.memory.performance[key] *= 1.2

# === TESTING ===
def test_integrated_system():
    config = NeuroConfig()
    engine = BioQuantumEngine(config)

    embeddings = {"opportunity": np.random.rand(config.DIM)}
    encoder = QuantumEncoder(embeddings, config)
    engine.memory.store("buy", encoder.encode("opportunity"), 0.7)

    simulate_psychedelic(engine, 25.0)

    decision, meta = engine.decide(
        {"risk": 0.8, "novelty": 0.9},
        "opportunity"
    )

    assert decision in ["buy", "hold"]
    assert 0 <= meta["score"] <= 2.0
    print("\u2705 Integration test passed")

if __name__ == "__main__":
    test_integrated_system()

    config = NeuroConfig()
    engine = BioQuantumEngine(config)

    engine.add_personality(
        PersonalityProfile("trader", {"risk": 0.9, "speed": 0.8})
    )
    engine.add_personality(
        PersonalityProfile("analyst", {"precision": 0.9, "risk": -0.5})
    )

    simulate_psychedelic(engine, 20.0)
    decision, report = engine.decide(
        {"risk": 0.7, "novelty": 0.6},
        "opportunity"
    )

    print("\nFinal report:")
    print(json.dumps(report, indent=2))
